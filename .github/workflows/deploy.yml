name: CI/CD Pipeline
on:
    push:
        branches:
            - test
            - stage
            - main

jobs:
    setup:
        runs-on: ubuntu-latest
        outputs:
            runner: ${{ steps.set-runner.outputs.runner }}
        steps:
            - name: set runner
              id: set-runner
              run: |
                  if [ ${{ github.ref_name }} == 'test' ]; then
                      echo "runner=mbp-14" >> $GITHUB_OUTPUT
                  else
                      echo "runner=mbp-13" >> $GITHUB_OUTPUT
                  fi

    deploy:
        needs: setup
        runs-on: ${{ needs.setup.outputs.runner }}
        environment: ${{ github.ref_name == 'main' && 'prod' || github.ref_name }}
        steps:
            - name: general vars
              run: |
                  VERSION=${{ github.run_number }}-${{ github.run_attempt }}-${{ github.run_id }}
                  echo "REPO=$(echo ${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
                  echo "IMAGE_TAG=$(date +%Y-%m-%d).$VERSION" >> $GITHUB_ENV

            - name: docker container names - non-prod
              if: github.ref_name != 'main'
              run: |
                  echo "SERVER_CONTAINER=$REPO-${{ github.ref_name }}-server" >> $GITHUB_ENV
                  echo "CLIENT_CONTAINER=$REPO-${{ github.ref_name }}-client" >> $GITHUB_ENV

            - name: docker container names - prod
              if: github.ref_name == 'main'
              run: |
                  echo "SERVER_CONTAINER=$REPO-server" >> $GITHUB_ENV
                  echo "CLIENT_CONTAINER=$REPO-client" >> $GITHUB_ENV

            - name: docker image names
              run: |
                  echo "SERVER_IMAGE=${{ secrets.DOCKER_REGISTRY }}/$SERVER_CONTAINER:$IMAGE_TAG" >> $GITHUB_ENV
                  echo "CLIENT_IMAGE=${{ secrets.DOCKER_REGISTRY }}/$CLIENT_CONTAINER:$IMAGE_TAG" >> $GITHUB_ENV

            - name: unlock keychain
              run: security unlock-keychain -p ${{ secrets.KEYCHAIN_PASSWORD }} login.keychain

            - name: checkout
              uses: actions/checkout@v4

            - name: setup node
              uses: actions/setup-node@v4
              with:
                  node-version: 'lts/*'
                  check-latest: true
                  cache: 'npm'
                  cache-dependency-path: |
                      package-lock.json
                      client/package-lock.json
                      server/package-lock.json

            - name: create server .env
              run: |
                  cd server/

                  echo "CLIENT_LOGTAIL_TOKEN=${{ secrets.CLIENT_LOGTAIL_TOKEN }}" >> .env
                  echo "SERVER_LOGTAIL_TOKEN=${{ secrets.SERVER_LOGTAIL_TOKEN }}" >> .env

                  echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env

                  echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
                  echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
                  echo "DB_USER=${{ secrets.DB_USER }}" >> .env
                  echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env

                  echo "CSRF_SECRET=${{ secrets.CSRF_SECRET }}" >> .env
                  echo "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" >> .env

                  echo "PLAID_CLIENT_ID=${{ secrets.PLAID_CLIENT_ID }}" >> .env
                  echo "PLAID_SECRET=${{ secrets.PLAID_SECRET }}" >> .env
                  echo "PLAID_WEBHOOK_URL=${{ secrets.PLAID_WEBHOOK_URL }}" >> .env

                  echo "DEMO_USER=${{ secrets.DEMO_USER }}" >> .env

                  echo "DOCKER_REGISTRY=${{ secrets.DOCKER_REGISTRY }}" >> .env
                  echo "KEYCHAIN_PASSWORD=${{ secrets.KEYCHAIN_PASSWORD }}" >> .env

                  echo "LOG_LEVEL=${{ vars.LOG_LEVEL }}" >> .env

                  echo "NODE_ENV=${{ vars.NODE_ENV }}" >> .env
                  echo "PLAID_ENV=${{ vars.PLAID_ENV }}" >> .env

                  echo "CLIENT_PORT=${{ vars.CLIENT_PORT }}" >> .env
                  echo "SERVER_PORT=${{ vars.SERVER_PORT }}" >> .env
                  echo "WEBHOOK_PORT=${{ vars.WEBHOOK_PORT }}" >> .env

            - name: modify client env.test.ts
              if: github.ref_name == 'test'
              run: |
                  cd client/src/environments/
                  sed -e "s/{SERVER_PORT}/${{ vars.SERVER_PORT}}/g" \
                      env.test.ts > env.test.ts.tmp
                  mv env.test.ts.tmp env.test.ts

            - name: install, build, package shared
              run: |
                  cd shared/
                  npm ci
                  npm run build
                  mkdir pack
                  cp -r dist/* pack
                  cd pack
                  npm pack
                  mv wealthwatch-shared-*.tgz ../wealthwatch-shared.tgz

            - name: install, build server
              run: |
                  cd server/
                  cp ../shared/wealthwatch-shared.tgz .
                  npm i wealthwatch-shared.tgz
                  npm ci
                  npm run build

            - name: install, build client - non-prod
              if: github.ref_name != 'main'
              run: |
                  cd client/
                  npm ci
                  npm run build:${{ github.ref_name }}

            - name: install, build client - prod
              if: github.ref_name == 'main'
              run: |
                  cd client/
                  npm ci
                  npm run build

            - name: copy server files
              run: |
                  cd server/
                  mkdir stage
                  cp -r .env Dockerfile package.json package-lock.json wealthwatch-shared.tgz dist stage/
                  find stage -type f

            - name: copy client files
              run: |
                  cd client/
                  mkdir stage
                  cp -r Dockerfile nginx.conf dist stage/
                  find stage -type f

            - name: build, push server docker image
              run: |
                  cd server/stage/
                  docker build -t $SERVER_IMAGE .
                  docker push $SERVER_IMAGE

            - name: build, push client docker image
              run: |
                  cd client/stage/
                  docker build -t $CLIENT_IMAGE .
                  docker push $CLIENT_IMAGE

            - name: start docker
              run: |
                  REPO=$REPO-${{ github.ref_name }}
                  SERVER_PORT=${{ vars.SERVER_PORT }} \
                  WEBHOOK_PORT=${{ vars.WEBHOOK_PORT }} \
                  CLIENT_PORT=${{ vars.CLIENT_PORT }} \
                  docker compose up -d

            - name: configure nginx - stage
              if: github.ref_name == 'stage'
              run: |
                  sed -e "s/{SERVER_PORT}/${{ vars.SERVER_PORT }}/g" \
                  -e "s/{WEBHOOK_PORT}/${{ vars.WEBHOOK_PORT }}/g" \
                  -e "s/{CLIENT_PORT}/${{ vars.CLIENT_PORT }}/g" \
                  wealthwatch-stage.conf > wealthwatch-stage.conf.tmp
                  mv wealthwatch-stage.conf.tmp wealthwatch-stage.conf
                  cp wealthwatch-stage.conf /usr/local/etc/nginx/servers/

            - name: configure nginx - prod
              if: github.ref_name == 'main'
              run: |
                  sed -e "s/{SERVER_PORT}/${{ vars.SERVER_PORT }}/g" \
                  -e "s/{WEBHOOK_PORT}/${{ vars.WEBHOOK_PORT }}/g" \
                  -e "s/{CLIENT_PORT}/${{ vars.CLIENT_PORT }}/g" \
                  wealthwatch.conf > wealthwatch.conf.tmp
                  mv wealthwatch.conf.tmp wealthwatch.conf
                  cp wealthwatch.conf /usr/local/etc/nginx/servers/

            - name: test, restart nginx
              if: github.ref_name != 'test'
              run: |
                  nginx -t
                  brew services restart nginx
