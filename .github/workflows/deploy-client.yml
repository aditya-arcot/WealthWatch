name: Deploy Client

on:
    workflow_call:
        inputs:
            runner:
                required: true
                type: string
            image:
                required: true
                type: string

permissions:
    contents: read

jobs:
    deploy:
        runs-on: ${{ inputs.runner }}
        environment: ${{ github.ref_name == 'main' && 'prod' || github.ref_name }}
        steps:
            - name: unlock keychain
              run: security unlock-keychain -p ${{ secrets.KEYCHAIN_PASSWORD }} login.keychain

            - name: checkout
              uses: actions/checkout@v4

            - name: setup node
              uses: actions/setup-node@v4
              with:
                  node-version: 'lts/*'
                  check-latest: true
                  cache: 'npm'
                  cache-dependency-path: client/package-lock.json

            - name: modify env.test.ts
              if: github.ref_name == 'test'
              working-directory: client/src/environments
              run: |
                  sed -e "s/{SERVER_PORT}/${{ vars.SERVER_PORT}}/g" \
                    env.test.ts > env.test.ts.tmp
                  mv env.test.ts.tmp env.test.ts

            - name: create .npmrc
              working-directory: client
              run: |
                  echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_NPM_TOKEN }}" >> .npmrc
                  echo "@aditya-arcot:registry=https://npm.pkg.github.com/" >> .npmrc

            - name: install, build - non-prod
              if: github.ref_name != 'main'
              working-directory: client
              run: |
                  npm --userconfig=/dev/null config ls
                  npm --userconfig=/dev/null ci
                  npm --userconfig=/dev/null run build:${{ github.ref_name }}

            - name: install, build - prod
              if: github.ref_name == 'main'
              working-directory: client
              run: |
                  npm --userconfig=/dev/null config ls
                  npm --userconfig=/dev/null ci
                  npm --userconfig=/dev/null run build

            - name: copy files
              working-directory: client
              run: |
                  mkdir stage
                  cp -r nginx.conf dist stage/
                  find stage -type f

            - name: build, push docker image
              working-directory: client/stage
              run: |
                  IMAGE=${{ secrets.DOCKER_REGISTRY }}/${{ inputs.image }}
                  docker build -t $IMAGE -f ../Dockerfile .
                  docker push $IMAGE
