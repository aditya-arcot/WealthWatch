#!/bin/bash

set -e

show_help() {
    echo "Usage: reset_db [options]"
    echo ""
    echo "Options:"
    echo "  --users        Seed the database users"
    echo "  --env file     Specify the environment file"
    echo "  -h, --help     Display this help message"
}

USERS=false
ENV_FILE="../.env.dev"

while [[ "$1" != "" ]]; do
    case $1 in
        --users)
            USERS=true
            ;;
        --env)
            shift
            ENV_FILE=$1
            ;;
        -h | --help)
            show_help
            exit
            ;;
        *)
            echo "Invalid option: $1"
            show_help
            exit 1
            ;;
    esac
    shift
done

echo "Seed users: $USERS"
echo "Environment file: $ENV_FILE"
echo

source ./load_env

if psql -lqt | cut -d \| -f 1 | grep -qw $DB_NAME; then
    echo "database already exists"
    echo "checking for active items..."
    VIEW_EXISTS=$(PGPASSWORD=$DB_PASSWORD psql $DB_NAME -U $DB_USER -tAc "SELECT EXISTS (SELECT 1 FROM information_schema.views WHERE table_name = 'active_items');")
    if [ "$VIEW_EXISTS" = "t" ]; then
        if PGPASSWORD=$DB_PASSWORD psql $DB_NAME -U $DB_USER -tAc "SELECT COUNT(*) FROM active_items;" | grep -q 0; then
            echo "database has no active items. dropping..."
            dropdb $DB_NAME
        else
            echo "database has active items. deactivate them before reset. aborting..."
            exit 1
        fi
    else
        echo "view 'active_items' does not exist. dropping..."
        dropdb $DB_NAME
    fi
else
    echo "database does not exist"
fi
echo

echo "creating database..."
createdb $DB_NAME
echo

if psql postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='$DB_USER';" | grep -q 1; then
    echo "user already exists. dropping..."
    psql postgres -c "DROP USER $DB_USER;"
else
    echo "user does not exist"
fi
echo

echo "creating user..."
psql postgres -c "CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';"
echo

echo "granting permissions..."
psql $DB_NAME -c "GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;"
echo

echo "creating objects..."

echo "creating temp file..."
TEMP_FILE="scripts/create/temp.sql"
echo "BEGIN;" > $TEMP_FILE
cat scripts/create/debug_tables.sql >> $TEMP_FILE
cat scripts/create/lookup_tables.sql >> $TEMP_FILE
cat scripts/create/functions.sql >> $TEMP_FILE
cat scripts/create/core_tables.sql >> $TEMP_FILE
cat scripts/create/core_views.sql >> $TEMP_FILE
cat scripts/create/core_triggers.sql >> $TEMP_FILE
echo "COMMIT;" >> $TEMP_FILE

echo "executing temp file..."
PGPASSWORD=$DB_PASSWORD psql $DB_NAME -U $DB_USER -f $TEMP_FILE -v ON_ERROR_STOP=1

echo "deleting temp file..."
rm $TEMP_FILE
echo

echo "seeding lookup data..."
PGPASSWORD=$DB_PASSWORD psql $DB_NAME -U $DB_USER -f scripts/seed/lookup_data.sql -v ON_ERROR_STOP=1
echo

if [ "$USERS" = true ]; then
    echo "seeding user data..."
    PGPASSWORD=$DB_PASSWORD psql $DB_NAME -U $DB_USER -f scripts/seed/user_data.sql -v ON_ERROR_STOP=1
    echo
fi
